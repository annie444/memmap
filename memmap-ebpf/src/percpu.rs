/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type bool_ = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_entry {
    pub type_: ::aya_ebpf::cty::c_ushort,
    pub flags: ::aya_ebpf::cty::c_uchar,
    pub preempt_count: ::aya_ebpf::cty::c_uchar,
    pub pid: ::aya_ebpf::cty::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct trace_event_raw_percpu_alloc_percpu {
    pub ent: trace_entry,
    pub call_site: ::aya_ebpf::cty::c_ulong,
    pub reserved: bool_,
    pub is_atomic: bool_,
    pub size: usize,
    pub align: usize,
    pub base_addr: *mut ::aya_ebpf::cty::c_void,
    pub off: ::aya_ebpf::cty::c_int,
    pub ptr: *mut ::aya_ebpf::cty::c_void,
    pub bytes_alloc: usize,
    pub gfp_flags: ::aya_ebpf::cty::c_ulong,
    pub __data: __IncompleteArrayField<::aya_ebpf::cty::c_char>,
}
#[repr(C)]
#[derive(Debug)]
pub struct trace_event_raw_percpu_free_percpu {
    pub ent: trace_entry,
    pub base_addr: *mut ::aya_ebpf::cty::c_void,
    pub off: ::aya_ebpf::cty::c_int,
    pub ptr: *mut ::aya_ebpf::cty::c_void,
    pub __data: __IncompleteArrayField<::aya_ebpf::cty::c_char>,
}
